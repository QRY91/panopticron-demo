# .github/workflows/ci.yml
name: Panopticron CI

on:
  push:
    branches: [ main, develop ] # Or your main branches
  pull_request:
    branches: [ main, develop ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x] # Test on relevant Node versions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn' # Enable caching for yarn dependencies

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run linters
      run: yarn lint

    - name: Run tests
      run: yarn vitest run # Use 'vitest run' for a single pass without watch mode
                           # Or if your 'yarn test' script already does 'vitest run'

    - name: Build project
      run: yarn build
      env: # Ensure build-time env vars are available if needed by Next.js build
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL_FOR_CI }} # Example
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY_FOR_CI }}
        # Add other build-time public env vars. DO NOT put secrets here directly.
        # For build, you usually don't need backend secrets like API tokens.

    - name: Report Test Run Status to Panopticron
      if: always() # Important: Ensures this step runs even if previous steps fail
      env:
        PANOPTICRON_API_URL: ${{ secrets.PANOPTICRON_CI_INGEST_URL }}
        PANOPTICRON_INGEST_TOKEN: ${{ secrets.PANOPTICRON_CI_INGEST_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by GitHub Actions, for gh CLI
      run: |
        echo "Current job status: ${{ job.status }}"
        echo "Workflow run ID: ${{ github.run_id }}"
        echo "Workflow name: ${{ github.workflow }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "GitHub Server URL: ${{ github.server_url }}"
        echo "Repository: ${{ github.repository }}"

        # Fetch the actual start time of the workflow run using GitHub CLI
        # The GITHUB_TOKEN is automatically used by 'gh api' for authentication.
        RUN_STARTED_AT=$(gh api "/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}" --jq '.run_started_at')
        
        if [ -z "$RUN_STARTED_AT" ] || [ "$RUN_STARTED_AT" == "null" ]; then
          echo "Error: Could not fetch run_started_at from GitHub API. Using current time as a fallback (this will result in an inaccurate duration)."
          RUN_STARTED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        fi
        
        echo "Fetched run_started_at: $RUN_STARTED_AT"

        # Construct the JSON payload
        JSON_PAYLOAD=$(cat <<EOF
        {
          "run_id": ${{ github.run_id }},
          "workflow_name": "${{ github.workflow }}",
          "branch": "${{ github.ref_name }}",
          "commit_sha": "${{ github.sha }}",
          "status": "${{ job.status }}",
          "html_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
          "run_started_at": "$RUN_STARTED_AT"
        }
        EOF
        )

        echo "Sending payload to Panopticron:"
        echo "$JSON_PAYLOAD"

        # Send the data to Panopticron API
        curl --request POST \
              --url "$PANOPTICRON_API_URL" \
              --header "Authorization: Bearer $PANOPTICRON_INGEST_TOKEN" \
              --header "Content-Type: application/json" \
              --data "$JSON_PAYLOAD" \
              --fail-with-body # Makes curl exit with an error if the HTTP response code is 4xx or 5xx

        echo "Data sent to Panopticron."
# Optional: Job to report coverage
#   coverage:
#     needs: test-and-build
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#     - name: Download coverage artifact
#       uses: actions/download-artifact@v3
#       with:
#         name: coverage-report # If your test job uploads it
#     - name: Report coverage to Coveralls/Codecov
#       uses: coverallsapp/github-action@master # Example for Coveralls
#       with:
#         github-token: ${{ secrets.GITHUB_TOKEN }}
#         path-to-lcov: './coverage/lcov.info' # Adjust path
